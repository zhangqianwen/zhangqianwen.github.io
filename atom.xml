<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Cheven&#39;s Notes</title>
  <subtitle>进一寸有一寸的欢喜</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://zhangqianwen.github.io/"/>
  <updated>2017-07-01T11:46:27.804Z</updated>
  <id>https://zhangqianwen.github.io/</id>
  
  <author>
    <name>Cheven Zhang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Sort Algorithm</title>
    <link href="https://zhangqianwen.github.io/2017/07/01/SortAlgorithm/"/>
    <id>https://zhangqianwen.github.io/2017/07/01/SortAlgorithm/</id>
    <published>2017-07-01T02:06:20.000Z</published>
    <updated>2017-07-01T11:46:27.804Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>排序算法按照是否使用使用外部存储分为两类：内部排序和外部排序。其中内部排序是数据记录在内存中进行排序，外部排序由于数据量较大超过内存到允许大小，因此在排序到过程中需要访问外存。</p>
<p><img src="/pictures/SortAlgorithm/1.png" alt=""></p>
<p>对数据量较大到数据进行排序，应该考虑吧使用时间复杂度为O(nlog2n)的排序方法：<em>堆排序、快速排序以及归并排序</em>。</p>
<p><strong>快速排序</strong>是目前基于比较的内部排序算法中最好的。在待排序的关键字是随机分布时，这种排序算法的效率是最高的。</p>
<h2 id="1-插入排序-直接插入排序（Straight-Insertion-Sort）"><a href="#1-插入排序-直接插入排序（Straight-Insertion-Sort）" class="headerlink" title="1.插入排序-直接插入排序（Straight Insertion Sort）"></a>1.插入排序-直接插入排序（Straight Insertion Sort）</h2><h3 id="基本思想"><a href="#基本思想" class="headerlink" title="基本思想"></a>基本思想</h3><p>将一个元素插入到一个有序元素序列中，得到一个长度+1的新的有序元素序列。即，将待排序序列的第一个元素看成一个有序的序列，从第二个元素开始依次插入，每次都要保证序列的有序。<br><img src="/pictures/SortAlgorithm/2.png" alt=""></p>
<p>如果插入到元素和有序序列中到某一元素相等，则插入在该元素的后面，两个相等到元素在排序到过程中顺序是不会被打乱的。因此，直接插入排序是<strong>稳定的</strong>。</p>
<h3 id="算法实现（java）"><a href="#算法实现（java）" class="headerlink" title="算法实现（java）"></a>算法实现（java）</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">StraightInsertionSort</span><span class="params">(<span class="keyword">int</span>[] a)</span></span>&#123;</div><div class="line">    <span class="keyword">int</span> n = a.length;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</div><div class="line">      <span class="keyword">int</span> tmp = a[i];</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++ ) &#123;</div><div class="line">        <span class="keyword">if</span> (a[i] &gt;= a[j]) &#123;</div><div class="line">          <span class="keyword">continue</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">int</span> tmpind = j;</div><div class="line">        <span class="keyword">while</span> (j &lt; i) &#123;</div><div class="line">            a[i] = a[--i];</div><div class="line">        &#125;</div><div class="line">        a[tmpind] = tmp;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<h3 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h3><p>O(n^2)</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;排序算法按照是否使用使用外部存储分为两类：内部排序和外部排序。其中内部排序是数据记录在内存中进行排序，外部排序由于数据量较大超过内存到允许大
    
    </summary>
    
    
  </entry>
  
</feed>
